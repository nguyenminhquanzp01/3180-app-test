// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Resident {
    id          String   @id @default(cuid())
    nationalId  String   @unique @map("nationalId")
    phoneNumber String   @map("phoneNumber")
    name        String   @map("name")
    gender      String   @map("gender")
    vehicle     String   @map("vehicle")
    createAt    DateTime @default(now()) @map("create_at")
    updateAt    DateTime @default(now()) @updatedAt @map("update_at")
    address     Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
    addressId   String   @unique
}

model Address {
    id               String      @id @default(cuid())
    apartment        Apartment   @relation(fields: [apartmentNo], references: [apartmentNo])
    apartmentNo      Int
    permanentAddress String
    currentAddress   String
    isStaying        Boolean
    dateRanges       DateRange[]
    resident         Resident?
}

model DateRange {
    id        String   @id @default(cuid())
    startDate DateTime @default(now()) @map("start_date")
    endDate   DateTime @map("end_date")
    type      String   @map("type")
    address   Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
    addressId String
}

model Apartment {
    id          Int       @id @default(autoincrement())
    apartmentNo Int       @unique
    size        Int
    fees        Fee[]
    addresses   Address[]
}

model Fee {
    id               String    @id @default(cuid())
    apartmentSizeFee Int
    internetFee      Int
    electricityFee   Int
    waterFee         Int
    contributionFee  Int?
    vehicleFee       Int
    notes            String?
    totalAmount      Float
    dueDate          DateTime
    isPaid           Boolean   @default(false)
    apartment        Apartment @relation(fields: [apartmentNo], references: [apartmentNo], onUpdate: Cascade, onDelete: Cascade)
    apartmentNo      Int
    createAt         DateTime  @default(now())
    updateAt         DateTime  @default(now()) @updatedAt
}
